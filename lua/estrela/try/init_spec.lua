local try = require("estrela.try")

describe("test for try.lua", function()
  describe("try/catch", function()
    it("success", function()
      local x = {}
      try(function()
        table.insert(x, "a")
      end):catch(function()
        table.insert(x, "b")
      end)()
      assert.same({ "a" }, x)
    end)
    it("fail", function()
      local x = {}
      try(function()
        table.insert(x, "a")
        error("raise error!")
      end):catch(function(e)
        table.insert(x, "b")
        assert(e:find("raise error!"), "invalid error message: " .. e)
      end)()
      assert.same({ "a", "b" }, x)
    end)
  end)

  describe("try/finally", function()
    it("order", function()
      local x = {}
      try(function()
        table.insert(x, "a")
      end):finally(function()
        table.insert(x, "b")
      end)()
      assert.same({ "a", "b" }, x)
    end)
    it("unhandled error", function()
      local result = ""
      local ok = pcall(try(function()
        error("raise error!")
      end):finally(function()
        result = "finally"
      end))
      assert.falsy(ok)
      assert.same("finally", result)
    end)
  end)

  describe("try/catch/finally", function()
    it("success", function()
      local x = {}
      try(function()
          table.insert(x, "a")
        end)
        :catch(function()
          table.insert(x, "b")
        end)
        :finally(function()
          table.insert(x, "c")
        end)()
      assert.same({ "a", "c" }, x)
    end)
    it("fail", function()
      local x = {}
      try(function()
          table.insert(x, "a")
          error("raise error!")
        end)
        :catch(function(e)
          table.insert(x, "b")
          assert(e:find("raise error!"), "invalid error message: " .. e)
        end)
        :finally(function()
          table.insert(x, "c")
        end)()
      assert.same({ "a", "b", "c" }, x)
    end)
  end)
end)
